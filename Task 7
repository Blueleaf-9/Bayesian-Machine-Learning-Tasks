import jax.numpy as jnp
from jax import random, vmap
import numpyro
import numpyro.distributions as dist
from numpyro.infer import MCMC, NUTS

y_values = jnp.array([1, 0, 1, 1, 0, 1, 1, 1, 1, 1])
n_values = jnp.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
posterior_list = []

def model(y, n):
    a = 2
    b = 3
    p = numpyro.sample("p", dist.Beta(a, b))
    numpyro.sample("y", dist.Binomial(n, p), obs=y)

for i in range(len(n_values)):
    rng_key = random.PRNGKey(0)
    kernel = NUTS(model)
    mcmc = MCMC(kernel, num_warmup=1000, num_samples=2000)
    mcmc.run(rng_key, y=y_values[i], n=n_values[i])
    samples = mcmc.get_samples()
    posterior_list.append(samples["p"])

posterior_list = jnp.array(posterior_list)

import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=len(n_values), figsize=(8, 2*len(n_values)), sharex=True, sharey=True)
for i, ax in enumerate(axes):
    ax.hist(posterior_list[i], bins=30, density=True)
    ax.set(title=f'n={n_values[i]}, y={y_values[i]}', xlabel='p', ylabel='density')
plt.tight_layout()
plt.show()
